import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from src.utils import font_dataset_to_matrix
from src.activation_function import ActivationFunction
from src.basic_autoencoder import BasicAutoEncoder  

font_3 = np.array([
   [0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00],   # 0x60, `
   [0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d],   # 0x61, a
   [0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c],   # 0x62, b
   [0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e],   # 0x63, c
   [0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07],   # 0x64, d
   [0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f],   # 0x65, e
   [0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08],   # 0x66, f
   [0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e],   # 0x67, g
   [0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11],   # 0x68, h
   [0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e],   # 0x69, i
   [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c],   # 0x6a, j
   [0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12],   # 0x6b, k
   [0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],   # 0x6c, l
   [0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11],   # 0x6d, m
   [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11],   # 0x6e, n
   [0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e],   # 0x6f, o
   [0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10],   # 0x70, p
   [0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01],   # 0x71, q
   [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10],   # 0x72, r
   [0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e],   # 0x73, s
   [0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06],   # 0x74, t
   [0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d],   # 0x75, u
   [0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04],   # 0x76, v
   [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a],   # 0x77, w
   [0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11],   # 0x78, x
   [0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e],   # 0x79, y
   [0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f],   # 0x7a, z
   [0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06],   # 0x7b, {
   [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04],   # 0x7c, |
   [0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c],   # 0x7d, }
   [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00],   # 0x7e, ~
   [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f],   # 0x7f, DEL
])

def main():
    dataset = font_dataset_to_matrix(font_3)

    autoencoder = BasicAutoEncoder(
        dataset=dataset,
        hidden_encoder_layers_to_latent_space=[100, 80, 50, 10, 2], 
        activation_func=ActivationFunction.LOGISTICS,
        learn_rate=0.001,
        min_error=0.01,
        max_epochs=10000
    )

    try:
        while autoencoder.has_next():
            autoencoder.next_epoch()
            print(f"Epoch {autoencoder.current_epoch}, error: {autoencoder.error:.5f}")
    except KeyboardInterrupt:
        pass

    # Visualización del primer carácter (índice 0)

    while True:
        try:
            num = int(input("Ingrese un número: "))
            elem = dataset[num]
        except ValueError:
            continue
        except IndexError:
            continue
        original = elem.reshape(7, 5)
        reconstructed_flat = autoencoder.try_current_epoch(elem)
        reconstructed = reconstructed_flat.reshape(7, 5)

        # Usar colormap monocromático (binario blanco/negro)
        cmap = plt.get_cmap('binary')

        fig, axs = plt.subplots(1, 2, figsize=(6, 3))
        sns.heatmap(original, cbar=False, vmin=0, vmax=1, linewidths=0.2, linecolor='k', square=True, ax=axs[0], cmap=cmap)
        axs[0].set_title("Original")

        sns.heatmap(reconstructed, cbar=False, vmin=0, vmax=1, linewidths=0.2, linecolor='k', square=True, ax=axs[1], cmap=cmap)
        axs[1].set_title("Reconstruido")

        plt.tight_layout()
        plt.show()

if __name__ == "__main__":
    main()
